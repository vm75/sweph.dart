// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'ffi_proxy.dart' as ffi;

/// Bindings for Sweph.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
/// Replace 'dart:ffi' with 'ffi_proxy.dart'
///
class SwephBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SwephBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SwephBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// ext_def(x) evaluates to x on Unix
  int swe_heliacal_ut(
    double tjdstart_ut,
    ffi.Pointer<ffi.Double> geopos,
    ffi.Pointer<ffi.Double> datm,
    ffi.Pointer<ffi.Double> dobs,
    ffi.Pointer<ffi.Uint8> ObjectName,
    int TypeEvent,
    int iflag,
    ffi.Pointer<ffi.Double> dret,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_heliacal_ut(
      tjdstart_ut,
      geopos,
      datm,
      dobs,
      ObjectName,
      TypeEvent,
      iflag,
      dret,
      serr,
    );
  }

  late final _swe_heliacal_utPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>,
              int32,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_heliacal_ut');
  late final _swe_heliacal_ut = _swe_heliacal_utPtr.asFunction<
      int Function(
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  int swe_heliacal_pheno_ut(
    double tjd_ut,
    ffi.Pointer<ffi.Double> geopos,
    ffi.Pointer<ffi.Double> datm,
    ffi.Pointer<ffi.Double> dobs,
    ffi.Pointer<ffi.Uint8> ObjectName,
    int TypeEvent,
    int helflag,
    ffi.Pointer<ffi.Double> darr,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_heliacal_pheno_ut(
      tjd_ut,
      geopos,
      datm,
      dobs,
      ObjectName,
      TypeEvent,
      helflag,
      darr,
      serr,
    );
  }

  late final _swe_heliacal_pheno_utPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>,
              int32,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_heliacal_pheno_ut');
  late final _swe_heliacal_pheno_ut = _swe_heliacal_pheno_utPtr.asFunction<
      int Function(
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  int swe_vis_limit_mag(
    double tjdut,
    ffi.Pointer<ffi.Double> geopos,
    ffi.Pointer<ffi.Double> datm,
    ffi.Pointer<ffi.Double> dobs,
    ffi.Pointer<ffi.Uint8> ObjectName,
    int helflag,
    ffi.Pointer<ffi.Double> dret,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_vis_limit_mag(
      tjdut,
      geopos,
      datm,
      dobs,
      ObjectName,
      helflag,
      dret,
      serr,
    );
  }

  late final _swe_vis_limit_magPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_vis_limit_mag');
  late final _swe_vis_limit_mag = _swe_vis_limit_magPtr.asFunction<
      int Function(
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  /// exports from sweph.c
  ffi.Pointer<ffi.Uint8> swe_version(
    ffi.Pointer<ffi.Uint8> arg0,
  ) {
    return _swe_version(
      arg0,
    );
  }

  late final _swe_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>)>>('swe_version');
  late final _swe_version = _swe_versionPtr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<ffi.Uint8> swe_get_library_path(
    ffi.Pointer<ffi.Uint8> arg0,
  ) {
    return _swe_get_library_path(
      arg0,
    );
  }

  late final _swe_get_library_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>)>>('swe_get_library_path');
  late final _swe_get_library_path = _swe_get_library_pathPtr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>)>();

  /// planets, moon, nodes etc.
  int swe_calc(
    double tjd,
    int ipl,
    int iflag,
    ffi.Pointer<ffi.Double> xx,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_calc(
      tjd,
      ipl,
      iflag,
      xx,
      serr,
    );
  }

  late final _swe_calcPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(ffi.Double, ffi.Int, int32, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_calc');
  late final _swe_calc = _swe_calcPtr.asFunction<
      int Function(
          double, int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint8>)>();

  int swe_calc_ut(
    double tjd_ut,
    int ipl,
    int iflag,
    ffi.Pointer<ffi.Double> xx,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_calc_ut(
      tjd_ut,
      ipl,
      iflag,
      xx,
      serr,
    );
  }

  late final _swe_calc_utPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(ffi.Double, int32, int32, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_calc_ut');
  late final _swe_calc_ut = _swe_calc_utPtr.asFunction<
      int Function(
          double, int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint8>)>();

  int swe_calc_pctr(
    double tjd,
    int ipl,
    int iplctr,
    int iflag,
    ffi.Pointer<ffi.Double> xxret,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_calc_pctr(
      tjd,
      ipl,
      iplctr,
      iflag,
      xxret,
      serr,
    );
  }

  late final _swe_calc_pctrPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              int32,
              int32,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_calc_pctr');
  late final _swe_calc_pctr = _swe_calc_pctrPtr.asFunction<
      int Function(double, int, int, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  double swe_solcross(
    double x2cross,
    double jd_et,
    int flag,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_solcross(
      x2cross,
      jd_et,
      flag,
      serr,
    );
  }

  late final _swe_solcrossPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, int32,
              ffi.Pointer<ffi.Uint8>)>>('swe_solcross');
  late final _swe_solcross = _swe_solcrossPtr.asFunction<
      double Function(double, double, int, ffi.Pointer<ffi.Uint8>)>();

  double swe_solcross_ut(
    double x2cross,
    double jd_ut,
    int flag,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_solcross_ut(
      x2cross,
      jd_ut,
      flag,
      serr,
    );
  }

  late final _swe_solcross_utPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, int32,
              ffi.Pointer<ffi.Uint8>)>>('swe_solcross_ut');
  late final _swe_solcross_ut = _swe_solcross_utPtr.asFunction<
      double Function(double, double, int, ffi.Pointer<ffi.Uint8>)>();

  double swe_mooncross(
    double x2cross,
    double jd_et,
    int flag,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_mooncross(
      x2cross,
      jd_et,
      flag,
      serr,
    );
  }

  late final _swe_mooncrossPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, int32,
              ffi.Pointer<ffi.Uint8>)>>('swe_mooncross');
  late final _swe_mooncross = _swe_mooncrossPtr.asFunction<
      double Function(double, double, int, ffi.Pointer<ffi.Uint8>)>();

  double swe_mooncross_ut(
    double x2cross,
    double jd_ut,
    int flag,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_mooncross_ut(
      x2cross,
      jd_ut,
      flag,
      serr,
    );
  }

  late final _swe_mooncross_utPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, int32,
              ffi.Pointer<ffi.Uint8>)>>('swe_mooncross_ut');
  late final _swe_mooncross_ut = _swe_mooncross_utPtr.asFunction<
      double Function(double, double, int, ffi.Pointer<ffi.Uint8>)>();

  double swe_mooncross_node(
    double jd_et,
    int flag,
    ffi.Pointer<ffi.Double> xlon,
    ffi.Pointer<ffi.Double> xlat,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_mooncross_node(
      jd_et,
      flag,
      xlon,
      xlat,
      serr,
    );
  }

  late final _swe_mooncross_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_mooncross_node');
  late final _swe_mooncross_node = _swe_mooncross_nodePtr.asFunction<
      double Function(double, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint8>)>();

  double swe_mooncross_node_ut(
    double jd_ut,
    int flag,
    ffi.Pointer<ffi.Double> xlon,
    ffi.Pointer<ffi.Double> xlat,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_mooncross_node_ut(
      jd_ut,
      flag,
      xlon,
      xlat,
      serr,
    );
  }

  late final _swe_mooncross_node_utPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_mooncross_node_ut');
  late final _swe_mooncross_node_ut = _swe_mooncross_node_utPtr.asFunction<
      double Function(double, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint8>)>();

  int swe_helio_cross(
    int ipl,
    double x2cross,
    double jd_et,
    int iflag,
    int dir,
    ffi.Pointer<ffi.Double> jd_cross,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_helio_cross(
      ipl,
      x2cross,
      jd_et,
      iflag,
      dir,
      jd_cross,
      serr,
    );
  }

  late final _swe_helio_crossPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              int32,
              ffi.Double,
              ffi.Double,
              int32,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_helio_cross');
  late final _swe_helio_cross = _swe_helio_crossPtr.asFunction<
      int Function(int, double, double, int, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  int swe_helio_cross_ut(
    int ipl,
    double x2cross,
    double jd_ut,
    int iflag,
    int dir,
    ffi.Pointer<ffi.Double> jd_cross,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_helio_cross_ut(
      ipl,
      x2cross,
      jd_ut,
      iflag,
      dir,
      jd_cross,
      serr,
    );
  }

  late final _swe_helio_cross_utPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              int32,
              ffi.Double,
              ffi.Double,
              int32,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_helio_cross_ut');
  late final _swe_helio_cross_ut = _swe_helio_cross_utPtr.asFunction<
      int Function(int, double, double, int, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  /// fixed stars
  int swe_fixstar(
    ffi.Pointer<ffi.Uint8> star,
    double tjd,
    int iflag,
    ffi.Pointer<ffi.Double> xx,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_fixstar(
      star,
      tjd,
      iflag,
      xx,
      serr,
    );
  }

  late final _swe_fixstarPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Double, int32,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint8>)>>('swe_fixstar');
  late final _swe_fixstar = _swe_fixstarPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, double, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  int swe_fixstar_ut(
    ffi.Pointer<ffi.Uint8> star,
    double tjd_ut,
    int iflag,
    ffi.Pointer<ffi.Double> xx,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_fixstar_ut(
      star,
      tjd_ut,
      iflag,
      xx,
      serr,
    );
  }

  late final _swe_fixstar_utPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_fixstar_ut');
  late final _swe_fixstar_ut = _swe_fixstar_utPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, double, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  int swe_fixstar_mag(
    ffi.Pointer<ffi.Uint8> star,
    ffi.Pointer<ffi.Double> mag,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_fixstar_mag(
      star,
      mag,
      serr,
    );
  }

  late final _swe_fixstar_magPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_fixstar_mag');
  late final _swe_fixstar_mag = _swe_fixstar_magPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  int swe_fixstar2(
    ffi.Pointer<ffi.Uint8> star,
    double tjd,
    int iflag,
    ffi.Pointer<ffi.Double> xx,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_fixstar2(
      star,
      tjd,
      iflag,
      xx,
      serr,
    );
  }

  late final _swe_fixstar2Ptr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_fixstar2');
  late final _swe_fixstar2 = _swe_fixstar2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, double, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  int swe_fixstar2_ut(
    ffi.Pointer<ffi.Uint8> star,
    double tjd_ut,
    int iflag,
    ffi.Pointer<ffi.Double> xx,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_fixstar2_ut(
      star,
      tjd_ut,
      iflag,
      xx,
      serr,
    );
  }

  late final _swe_fixstar2_utPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_fixstar2_ut');
  late final _swe_fixstar2_ut = _swe_fixstar2_utPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, double, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  int swe_fixstar2_mag(
    ffi.Pointer<ffi.Uint8> star,
    ffi.Pointer<ffi.Double> mag,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_fixstar2_mag(
      star,
      mag,
      serr,
    );
  }

  late final _swe_fixstar2_magPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_fixstar2_mag');
  late final _swe_fixstar2_mag = _swe_fixstar2_magPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  /// close Swiss Ephemeris
  void swe_close() {
    return _swe_close();
  }

  late final _swe_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('swe_close');
  late final _swe_close = _swe_closePtr.asFunction<void Function()>();

  /// set directory path of ephemeris files
  void swe_set_ephe_path(
    ffi.Pointer<ffi.Uint8> path,
  ) {
    return _swe_set_ephe_path(
      path,
    );
  }

  late final _swe_set_ephe_pathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>)>>(
          'swe_set_ephe_path');
  late final _swe_set_ephe_path =
      _swe_set_ephe_pathPtr.asFunction<void Function(ffi.Pointer<ffi.Uint8>)>();

  /// set file name of JPL file
  void swe_set_jpl_file(
    ffi.Pointer<ffi.Uint8> fname,
  ) {
    return _swe_set_jpl_file(
      fname,
    );
  }

  late final _swe_set_jpl_filePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>)>>(
          'swe_set_jpl_file');
  late final _swe_set_jpl_file =
      _swe_set_jpl_filePtr.asFunction<void Function(ffi.Pointer<ffi.Uint8>)>();

  /// get planet name
  ffi.Pointer<ffi.Uint8> swe_get_planet_name(
    int ipl,
    ffi.Pointer<ffi.Uint8> spname,
  ) {
    return _swe_get_planet_name(
      ipl,
      spname,
    );
  }

  late final _swe_get_planet_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Int, ffi.Pointer<ffi.Uint8>)>>('swe_get_planet_name');
  late final _swe_get_planet_name = _swe_get_planet_namePtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(int, ffi.Pointer<ffi.Uint8>)>();

  /// set geographic position of observer
  void swe_set_topo(
    double geolon,
    double geolat,
    double geoalt,
  ) {
    return _swe_set_topo(
      geolon,
      geolat,
      geoalt,
    );
  }

  late final _swe_set_topoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double, ffi.Double, ffi.Double)>>('swe_set_topo');
  late final _swe_set_topo =
      _swe_set_topoPtr.asFunction<void Function(double, double, double)>();

  /// set sidereal mode
  void swe_set_sid_mode(
    int sid_mode,
    double t0,
    double ayan_t0,
  ) {
    return _swe_set_sid_mode(
      sid_mode,
      t0,
      ayan_t0,
    );
  }

  late final _swe_set_sid_modePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(int32, ffi.Double, ffi.Double)>>(
      'swe_set_sid_mode');
  late final _swe_set_sid_mode =
      _swe_set_sid_modePtr.asFunction<void Function(int, double, double)>();

  /// get ayanamsa
  int swe_get_ayanamsa_ex(
    double tjd_et,
    int iflag,
    ffi.Pointer<ffi.Double> daya,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_get_ayanamsa_ex(
      tjd_et,
      iflag,
      daya,
      serr,
    );
  }

  late final _swe_get_ayanamsa_exPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(ffi.Double, int32, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_get_ayanamsa_ex');
  late final _swe_get_ayanamsa_ex = _swe_get_ayanamsa_exPtr.asFunction<
      int Function(
          double, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint8>)>();

  int swe_get_ayanamsa_ex_ut(
    double tjd_ut,
    int iflag,
    ffi.Pointer<ffi.Double> daya,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_get_ayanamsa_ex_ut(
      tjd_ut,
      iflag,
      daya,
      serr,
    );
  }

  late final _swe_get_ayanamsa_ex_utPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(ffi.Double, int32, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_get_ayanamsa_ex_ut');
  late final _swe_get_ayanamsa_ex_ut = _swe_get_ayanamsa_ex_utPtr.asFunction<
      int Function(
          double, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint8>)>();

  double swe_get_ayanamsa(
    double tjd_et,
  ) {
    return _swe_get_ayanamsa(
      tjd_et,
    );
  }

  late final _swe_get_ayanamsaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'swe_get_ayanamsa');
  late final _swe_get_ayanamsa =
      _swe_get_ayanamsaPtr.asFunction<double Function(double)>();

  double swe_get_ayanamsa_ut(
    double tjd_ut,
  ) {
    return _swe_get_ayanamsa_ut(
      tjd_ut,
    );
  }

  late final _swe_get_ayanamsa_utPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'swe_get_ayanamsa_ut');
  late final _swe_get_ayanamsa_ut =
      _swe_get_ayanamsa_utPtr.asFunction<double Function(double)>();

  ffi.Pointer<ffi.Uint8> swe_get_ayanamsa_name(
    int isidmode,
  ) {
    return _swe_get_ayanamsa_name(
      isidmode,
    );
  }

  late final _swe_get_ayanamsa_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(int32)>>(
          'swe_get_ayanamsa_name');
  late final _swe_get_ayanamsa_name = _swe_get_ayanamsa_namePtr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<ffi.Uint8> swe_get_current_file_data(
    int ifno,
    ffi.Pointer<ffi.Double> tfstart,
    ffi.Pointer<ffi.Double> tfend,
    ffi.Pointer<ffi.Int> denum,
  ) {
    return _swe_get_current_file_data(
      ifno,
      tfstart,
      tfend,
      denum,
    );
  }

  late final _swe_get_current_file_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>)>>('swe_get_current_file_data');
  late final _swe_get_current_file_data =
      _swe_get_current_file_dataPtr.asFunction<
          ffi.Pointer<ffi.Uint8> Function(int, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int>)>();

  /// exports from swedate.c
  int swe_date_conversion(
    int y,
    int m,
    int d,
    double utime,
    int c,
    ffi.Pointer<ffi.Double> tjd,
  ) {
    return _swe_date_conversion(
      y,
      m,
      d,
      utime,
      c,
      tjd,
    );
  }

  late final _swe_date_conversionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Double, ffi.Uint8,
              ffi.Pointer<ffi.Double>)>>('swe_date_conversion');
  late final _swe_date_conversion = _swe_date_conversionPtr.asFunction<
      int Function(int, int, int, double, int, ffi.Pointer<ffi.Double>)>();

  double swe_julday(
    int year,
    int month,
    int day,
    double hour,
    int gregflag,
  ) {
    return _swe_julday(
      year,
      month,
      day,
      hour,
      gregflag,
    );
  }

  late final _swe_juldayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Double, ffi.Int)>>('swe_julday');
  late final _swe_julday =
      _swe_juldayPtr.asFunction<double Function(int, int, int, double, int)>();

  void swe_revjul(
    double jd,
    int gregflag,
    ffi.Pointer<ffi.Int> jyear,
    ffi.Pointer<ffi.Int> jmon,
    ffi.Pointer<ffi.Int> jday,
    ffi.Pointer<ffi.Double> jut,
  ) {
    return _swe_revjul(
      jd,
      gregflag,
      jyear,
      jmon,
      jday,
      jut,
    );
  }

  late final _swe_revjulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>)>>('swe_revjul');
  late final _swe_revjul = _swe_revjulPtr.asFunction<
      void Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>)>();

  int swe_utc_to_jd(
    int iyear,
    int imonth,
    int iday,
    int ihour,
    int imin,
    double dsec,
    int gregflag,
    ffi.Pointer<ffi.Double> dret,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_utc_to_jd(
      iyear,
      imonth,
      iday,
      ihour,
      imin,
      dsec,
      gregflag,
      dret,
      serr,
    );
  }

  late final _swe_utc_to_jdPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              int32,
              int32,
              int32,
              int32,
              int32,
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_utc_to_jd');
  late final _swe_utc_to_jd = _swe_utc_to_jdPtr.asFunction<
      int Function(int, int, int, int, int, double, int,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint8>)>();

  void swe_jdet_to_utc(
    double tjd_et,
    int gregflag,
    ffi.Pointer<int32> iyear,
    ffi.Pointer<int32> imonth,
    ffi.Pointer<int32> iday,
    ffi.Pointer<int32> ihour,
    ffi.Pointer<int32> imin,
    ffi.Pointer<ffi.Double> dsec,
  ) {
    return _swe_jdet_to_utc(
      tjd_et,
      gregflag,
      iyear,
      imonth,
      iday,
      ihour,
      imin,
      dsec,
    );
  }

  late final _swe_jdet_to_utcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double,
              int32,
              ffi.Pointer<int32>,
              ffi.Pointer<int32>,
              ffi.Pointer<int32>,
              ffi.Pointer<int32>,
              ffi.Pointer<int32>,
              ffi.Pointer<ffi.Double>)>>('swe_jdet_to_utc');
  late final _swe_jdet_to_utc = _swe_jdet_to_utcPtr.asFunction<
      void Function(
          double,
          int,
          ffi.Pointer<int32>,
          ffi.Pointer<int32>,
          ffi.Pointer<int32>,
          ffi.Pointer<int32>,
          ffi.Pointer<int32>,
          ffi.Pointer<ffi.Double>)>();

  void swe_jdut1_to_utc(
    double tjd_ut,
    int gregflag,
    ffi.Pointer<int32> iyear,
    ffi.Pointer<int32> imonth,
    ffi.Pointer<int32> iday,
    ffi.Pointer<int32> ihour,
    ffi.Pointer<int32> imin,
    ffi.Pointer<ffi.Double> dsec,
  ) {
    return _swe_jdut1_to_utc(
      tjd_ut,
      gregflag,
      iyear,
      imonth,
      iday,
      ihour,
      imin,
      dsec,
    );
  }

  late final _swe_jdut1_to_utcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double,
              int32,
              ffi.Pointer<int32>,
              ffi.Pointer<int32>,
              ffi.Pointer<int32>,
              ffi.Pointer<int32>,
              ffi.Pointer<int32>,
              ffi.Pointer<ffi.Double>)>>('swe_jdut1_to_utc');
  late final _swe_jdut1_to_utc = _swe_jdut1_to_utcPtr.asFunction<
      void Function(
          double,
          int,
          ffi.Pointer<int32>,
          ffi.Pointer<int32>,
          ffi.Pointer<int32>,
          ffi.Pointer<int32>,
          ffi.Pointer<int32>,
          ffi.Pointer<ffi.Double>)>();

  void swe_utc_time_zone(
    int iyear,
    int imonth,
    int iday,
    int ihour,
    int imin,
    double dsec,
    double d_timezone,
    ffi.Pointer<int32> iyear_out,
    ffi.Pointer<int32> imonth_out,
    ffi.Pointer<int32> iday_out,
    ffi.Pointer<int32> ihour_out,
    ffi.Pointer<int32> imin_out,
    ffi.Pointer<ffi.Double> dsec_out,
  ) {
    return _swe_utc_time_zone(
      iyear,
      imonth,
      iday,
      ihour,
      imin,
      dsec,
      d_timezone,
      iyear_out,
      imonth_out,
      iday_out,
      ihour_out,
      imin_out,
      dsec_out,
    );
  }

  late final _swe_utc_time_zonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              int32,
              int32,
              int32,
              int32,
              int32,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<int32>,
              ffi.Pointer<int32>,
              ffi.Pointer<int32>,
              ffi.Pointer<int32>,
              ffi.Pointer<int32>,
              ffi.Pointer<ffi.Double>)>>('swe_utc_time_zone');
  late final _swe_utc_time_zone = _swe_utc_time_zonePtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          double,
          double,
          ffi.Pointer<int32>,
          ffi.Pointer<int32>,
          ffi.Pointer<int32>,
          ffi.Pointer<int32>,
          ffi.Pointer<int32>,
          ffi.Pointer<ffi.Double>)>();

  /// exports from swehouse.c
  int swe_houses(
    double tjd_ut,
    double geolat,
    double geolon,
    int hsys,
    ffi.Pointer<ffi.Double> cusps,
    ffi.Pointer<ffi.Double> ascmc,
  ) {
    return _swe_houses(
      tjd_ut,
      geolat,
      geolon,
      hsys,
      cusps,
      ascmc,
    );
  }

  late final _swe_housesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Double, ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('swe_houses');
  late final _swe_houses = _swe_housesPtr.asFunction<
      int Function(double, double, double, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int swe_houses_ex(
    double tjd_ut,
    int iflag,
    double geolat,
    double geolon,
    int hsys,
    ffi.Pointer<ffi.Double> cusps,
    ffi.Pointer<ffi.Double> ascmc,
  ) {
    return _swe_houses_ex(
      tjd_ut,
      iflag,
      geolat,
      geolon,
      hsys,
      cusps,
      ascmc,
    );
  }

  late final _swe_houses_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              int32,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('swe_houses_ex');
  late final _swe_houses_ex = _swe_houses_exPtr.asFunction<
      int Function(double, int, double, double, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int swe_houses_ex2(
    double tjd_ut,
    int iflag,
    double geolat,
    double geolon,
    int hsys,
    ffi.Pointer<ffi.Double> cusps,
    ffi.Pointer<ffi.Double> ascmc,
    ffi.Pointer<ffi.Double> cusp_speed,
    ffi.Pointer<ffi.Double> ascmc_speed,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_houses_ex2(
      tjd_ut,
      iflag,
      geolat,
      geolon,
      hsys,
      cusps,
      ascmc,
      cusp_speed,
      ascmc_speed,
      serr,
    );
  }

  late final _swe_houses_ex2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              int32,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_houses_ex2');
  late final _swe_houses_ex2 = _swe_houses_ex2Ptr.asFunction<
      int Function(
          double,
          int,
          double,
          double,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  int swe_houses_armc(
    double armc,
    double geolat,
    double eps,
    int hsys,
    ffi.Pointer<ffi.Double> cusps,
    ffi.Pointer<ffi.Double> ascmc,
  ) {
    return _swe_houses_armc(
      armc,
      geolat,
      eps,
      hsys,
      cusps,
      ascmc,
    );
  }

  late final _swe_houses_armcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('swe_houses_armc');
  late final _swe_houses_armc = _swe_houses_armcPtr.asFunction<
      int Function(double, double, double, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int swe_houses_armc_ex2(
    double armc,
    double geolat,
    double eps,
    int hsys,
    ffi.Pointer<ffi.Double> cusps,
    ffi.Pointer<ffi.Double> ascmc,
    ffi.Pointer<ffi.Double> cusp_speed,
    ffi.Pointer<ffi.Double> ascmc_speed,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_houses_armc_ex2(
      armc,
      geolat,
      eps,
      hsys,
      cusps,
      ascmc,
      cusp_speed,
      ascmc_speed,
      serr,
    );
  }

  late final _swe_houses_armc_ex2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_houses_armc_ex2');
  late final _swe_houses_armc_ex2 = _swe_houses_armc_ex2Ptr.asFunction<
      int Function(
          double,
          double,
          double,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  double swe_house_pos(
    double armc,
    double geolat,
    double eps,
    int hsys,
    ffi.Pointer<ffi.Double> xpin,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_house_pos(
      armc,
      geolat,
      eps,
      hsys,
      xpin,
      serr,
    );
  }

  late final _swe_house_posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_house_pos');
  late final _swe_house_pos = _swe_house_posPtr.asFunction<
      double Function(double, double, double, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<ffi.Uint8> swe_house_name(
    int hsys,
  ) {
    return _swe_house_name(
      hsys,
    );
  }

  late final _swe_house_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Int)>>(
          'swe_house_name');
  late final _swe_house_name =
      _swe_house_namePtr.asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  /// exports from swecl.c
  int swe_gauquelin_sector(
    double t_ut,
    int ipl,
    ffi.Pointer<ffi.Uint8> starname,
    int iflag,
    int imeth,
    ffi.Pointer<ffi.Double> geopos,
    double atpress,
    double attemp,
    ffi.Pointer<ffi.Double> dgsect,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_gauquelin_sector(
      t_ut,
      ipl,
      starname,
      iflag,
      imeth,
      geopos,
      atpress,
      attemp,
      dgsect,
      serr,
    );
  }

  late final _swe_gauquelin_sectorPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Uint8>,
              int32,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_gauquelin_sector');
  late final _swe_gauquelin_sector = _swe_gauquelin_sectorPtr.asFunction<
      int Function(
          double,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Double>,
          double,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  /// computes geographic location and attributes of solar
  /// eclipse at a given tjd
  int swe_sol_eclipse_where(
    double tjd,
    int ifl,
    ffi.Pointer<ffi.Double> geopos,
    ffi.Pointer<ffi.Double> attr,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_sol_eclipse_where(
      tjd,
      ifl,
      geopos,
      attr,
      serr,
    );
  }

  late final _swe_sol_eclipse_wherePtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_sol_eclipse_where');
  late final _swe_sol_eclipse_where = _swe_sol_eclipse_wherePtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint8>)>();

  int swe_lun_occult_where(
    double tjd,
    int ipl,
    ffi.Pointer<ffi.Uint8> starname,
    int ifl,
    ffi.Pointer<ffi.Double> geopos,
    ffi.Pointer<ffi.Double> attr,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_lun_occult_where(
      tjd,
      ipl,
      starname,
      ifl,
      geopos,
      attr,
      serr,
    );
  }

  late final _swe_lun_occult_wherePtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Uint8>,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_lun_occult_where');
  late final _swe_lun_occult_where = _swe_lun_occult_wherePtr.asFunction<
      int Function(
          double,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  /// computes attributes of a solar eclipse for given tjd, geolon, geolat
  int swe_sol_eclipse_how(
    double tjd,
    int ifl,
    ffi.Pointer<ffi.Double> geopos,
    ffi.Pointer<ffi.Double> attr,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_sol_eclipse_how(
      tjd,
      ifl,
      geopos,
      attr,
      serr,
    );
  }

  late final _swe_sol_eclipse_howPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_sol_eclipse_how');
  late final _swe_sol_eclipse_how = _swe_sol_eclipse_howPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint8>)>();

  /// finds time of next local eclipse
  int swe_sol_eclipse_when_loc(
    double tjd_start,
    int ifl,
    ffi.Pointer<ffi.Double> geopos,
    ffi.Pointer<ffi.Double> tret,
    ffi.Pointer<ffi.Double> attr,
    int backward,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_sol_eclipse_when_loc(
      tjd_start,
      ifl,
      geopos,
      tret,
      attr,
      backward,
      serr,
    );
  }

  late final _swe_sol_eclipse_when_locPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              int32,
              ffi.Pointer<ffi.Uint8>)>>('swe_sol_eclipse_when_loc');
  late final _swe_sol_eclipse_when_loc =
      _swe_sol_eclipse_when_locPtr.asFunction<
          int Function(
              double,
              int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  int swe_lun_occult_when_loc(
    double tjd_start,
    int ipl,
    ffi.Pointer<ffi.Uint8> starname,
    int ifl,
    ffi.Pointer<ffi.Double> geopos,
    ffi.Pointer<ffi.Double> tret,
    ffi.Pointer<ffi.Double> attr,
    int backward,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_lun_occult_when_loc(
      tjd_start,
      ipl,
      starname,
      ifl,
      geopos,
      tret,
      attr,
      backward,
      serr,
    );
  }

  late final _swe_lun_occult_when_locPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Uint8>,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              int32,
              ffi.Pointer<ffi.Uint8>)>>('swe_lun_occult_when_loc');
  late final _swe_lun_occult_when_loc = _swe_lun_occult_when_locPtr.asFunction<
      int Function(
          double,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Uint8>)>();

  /// finds time of next eclipse globally
  int swe_sol_eclipse_when_glob(
    double tjd_start,
    int ifl,
    int ifltype,
    ffi.Pointer<ffi.Double> tret,
    int backward,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_sol_eclipse_when_glob(
      tjd_start,
      ifl,
      ifltype,
      tret,
      backward,
      serr,
    );
  }

  late final _swe_sol_eclipse_when_globPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(ffi.Double, int32, int32, ffi.Pointer<ffi.Double>,
              int32, ffi.Pointer<ffi.Uint8>)>>('swe_sol_eclipse_when_glob');
  late final _swe_sol_eclipse_when_glob =
      _swe_sol_eclipse_when_globPtr.asFunction<
          int Function(double, int, int, ffi.Pointer<ffi.Double>, int,
              ffi.Pointer<ffi.Uint8>)>();

  /// finds time of next occultation globally
  int swe_lun_occult_when_glob(
    double tjd_start,
    int ipl,
    ffi.Pointer<ffi.Uint8> starname,
    int ifl,
    int ifltype,
    ffi.Pointer<ffi.Double> tret,
    int backward,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_lun_occult_when_glob(
      tjd_start,
      ipl,
      starname,
      ifl,
      ifltype,
      tret,
      backward,
      serr,
    );
  }

  late final _swe_lun_occult_when_globPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Uint8>,
              int32,
              int32,
              ffi.Pointer<ffi.Double>,
              int32,
              ffi.Pointer<ffi.Uint8>)>>('swe_lun_occult_when_glob');
  late final _swe_lun_occult_when_glob =
      _swe_lun_occult_when_globPtr.asFunction<
          int Function(double, int, ffi.Pointer<ffi.Uint8>, int, int,
              ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Uint8>)>();

  /// computes attributes of a lunar eclipse for given tjd
  int swe_lun_eclipse_how(
    double tjd_ut,
    int ifl,
    ffi.Pointer<ffi.Double> geopos,
    ffi.Pointer<ffi.Double> attr,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_lun_eclipse_how(
      tjd_ut,
      ifl,
      geopos,
      attr,
      serr,
    );
  }

  late final _swe_lun_eclipse_howPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_lun_eclipse_how');
  late final _swe_lun_eclipse_how = _swe_lun_eclipse_howPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint8>)>();

  int swe_lun_eclipse_when(
    double tjd_start,
    int ifl,
    int ifltype,
    ffi.Pointer<ffi.Double> tret,
    int backward,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_lun_eclipse_when(
      tjd_start,
      ifl,
      ifltype,
      tret,
      backward,
      serr,
    );
  }

  late final _swe_lun_eclipse_whenPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(ffi.Double, int32, int32, ffi.Pointer<ffi.Double>,
              int32, ffi.Pointer<ffi.Uint8>)>>('swe_lun_eclipse_when');
  late final _swe_lun_eclipse_when = _swe_lun_eclipse_whenPtr.asFunction<
      int Function(double, int, int, ffi.Pointer<ffi.Double>, int,
          ffi.Pointer<ffi.Uint8>)>();

  int swe_lun_eclipse_when_loc(
    double tjd_start,
    int ifl,
    ffi.Pointer<ffi.Double> geopos,
    ffi.Pointer<ffi.Double> tret,
    ffi.Pointer<ffi.Double> attr,
    int backward,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_lun_eclipse_when_loc(
      tjd_start,
      ifl,
      geopos,
      tret,
      attr,
      backward,
      serr,
    );
  }

  late final _swe_lun_eclipse_when_locPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              int32,
              ffi.Pointer<ffi.Uint8>)>>('swe_lun_eclipse_when_loc');
  late final _swe_lun_eclipse_when_loc =
      _swe_lun_eclipse_when_locPtr.asFunction<
          int Function(
              double,
              int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  /// planetary phenomena
  int swe_pheno(
    double tjd,
    int ipl,
    int iflag,
    ffi.Pointer<ffi.Double> attr,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_pheno(
      tjd,
      ipl,
      iflag,
      attr,
      serr,
    );
  }

  late final _swe_phenoPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(ffi.Double, int32, int32, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_pheno');
  late final _swe_pheno = _swe_phenoPtr.asFunction<
      int Function(
          double, int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint8>)>();

  int swe_pheno_ut(
    double tjd_ut,
    int ipl,
    int iflag,
    ffi.Pointer<ffi.Double> attr,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_pheno_ut(
      tjd_ut,
      ipl,
      iflag,
      attr,
      serr,
    );
  }

  late final _swe_pheno_utPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(ffi.Double, int32, int32, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_pheno_ut');
  late final _swe_pheno_ut = _swe_pheno_utPtr.asFunction<
      int Function(
          double, int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint8>)>();

  double swe_refrac(
    double inalt,
    double atpress,
    double attemp,
    int calc_flag,
  ) {
    return _swe_refrac(
      inalt,
      atpress,
      attemp,
      calc_flag,
    );
  }

  late final _swe_refracPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double, int32)>>('swe_refrac');
  late final _swe_refrac =
      _swe_refracPtr.asFunction<double Function(double, double, double, int)>();

  double swe_refrac_extended(
    double inalt,
    double geoalt,
    double atpress,
    double attemp,
    double lapse_rate,
    int calc_flag,
    ffi.Pointer<ffi.Double> dret,
  ) {
    return _swe_refrac_extended(
      inalt,
      geoalt,
      atpress,
      attemp,
      lapse_rate,
      calc_flag,
      dret,
    );
  }

  late final _swe_refrac_extendedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Double>)>>('swe_refrac_extended');
  late final _swe_refrac_extended = _swe_refrac_extendedPtr.asFunction<
      double Function(double, double, double, double, double, int,
          ffi.Pointer<ffi.Double>)>();

  void swe_set_lapse_rate(
    double lapse_rate,
  ) {
    return _swe_set_lapse_rate(
      lapse_rate,
    );
  }

  late final _swe_set_lapse_ratePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Double)>>(
          'swe_set_lapse_rate');
  late final _swe_set_lapse_rate =
      _swe_set_lapse_ratePtr.asFunction<void Function(double)>();

  void swe_azalt(
    double tjd_ut,
    int calc_flag,
    ffi.Pointer<ffi.Double> geopos,
    double atpress,
    double attemp,
    ffi.Pointer<ffi.Double> xin,
    ffi.Pointer<ffi.Double> xaz,
  ) {
    return _swe_azalt(
      tjd_ut,
      calc_flag,
      geopos,
      atpress,
      attemp,
      xin,
      xaz,
    );
  }

  late final _swe_azaltPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('swe_azalt');
  late final _swe_azalt = _swe_azaltPtr.asFunction<
      void Function(double, int, ffi.Pointer<ffi.Double>, double, double,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void swe_azalt_rev(
    double tjd_ut,
    int calc_flag,
    ffi.Pointer<ffi.Double> geopos,
    ffi.Pointer<ffi.Double> xin,
    ffi.Pointer<ffi.Double> xout,
  ) {
    return _swe_azalt_rev(
      tjd_ut,
      calc_flag,
      geopos,
      xin,
      xout,
    );
  }

  late final _swe_azalt_revPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('swe_azalt_rev');
  late final _swe_azalt_rev = _swe_azalt_revPtr.asFunction<
      void Function(double, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int swe_rise_trans_true_hor(
    double tjd_ut,
    int ipl,
    ffi.Pointer<ffi.Uint8> starname,
    int epheflag,
    int rsmi,
    ffi.Pointer<ffi.Double> geopos,
    double atpress,
    double attemp,
    double horhgt,
    ffi.Pointer<ffi.Double> tret,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_rise_trans_true_hor(
      tjd_ut,
      ipl,
      starname,
      epheflag,
      rsmi,
      geopos,
      atpress,
      attemp,
      horhgt,
      tret,
      serr,
    );
  }

  late final _swe_rise_trans_true_horPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Uint8>,
              int32,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_rise_trans_true_hor');
  late final _swe_rise_trans_true_hor = _swe_rise_trans_true_horPtr.asFunction<
      int Function(
          double,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Double>,
          double,
          double,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  int swe_rise_trans(
    double tjd_ut,
    int ipl,
    ffi.Pointer<ffi.Uint8> starname,
    int epheflag,
    int rsmi,
    ffi.Pointer<ffi.Double> geopos,
    double atpress,
    double attemp,
    ffi.Pointer<ffi.Double> tret,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_rise_trans(
      tjd_ut,
      ipl,
      starname,
      epheflag,
      rsmi,
      geopos,
      atpress,
      attemp,
      tret,
      serr,
    );
  }

  late final _swe_rise_transPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              int32,
              ffi.Pointer<ffi.Uint8>,
              int32,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_rise_trans');
  late final _swe_rise_trans = _swe_rise_transPtr.asFunction<
      int Function(
          double,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Double>,
          double,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  int swe_nod_aps(
    double tjd_et,
    int ipl,
    int iflag,
    int method,
    ffi.Pointer<ffi.Double> xnasc,
    ffi.Pointer<ffi.Double> xndsc,
    ffi.Pointer<ffi.Double> xperi,
    ffi.Pointer<ffi.Double> xaphe,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_nod_aps(
      tjd_et,
      ipl,
      iflag,
      method,
      xnasc,
      xndsc,
      xperi,
      xaphe,
      serr,
    );
  }

  late final _swe_nod_apsPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              int32,
              int32,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_nod_aps');
  late final _swe_nod_aps = _swe_nod_apsPtr.asFunction<
      int Function(
          double,
          int,
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  int swe_nod_aps_ut(
    double tjd_ut,
    int ipl,
    int iflag,
    int method,
    ffi.Pointer<ffi.Double> xnasc,
    ffi.Pointer<ffi.Double> xndsc,
    ffi.Pointer<ffi.Double> xperi,
    ffi.Pointer<ffi.Double> xaphe,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_nod_aps_ut(
      tjd_ut,
      ipl,
      iflag,
      method,
      xnasc,
      xndsc,
      xperi,
      xaphe,
      serr,
    );
  }

  late final _swe_nod_aps_utPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              int32,
              int32,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_nod_aps_ut');
  late final _swe_nod_aps_ut = _swe_nod_aps_utPtr.asFunction<
      int Function(
          double,
          int,
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint8>)>();

  int swe_get_orbital_elements(
    double tjd_et,
    int ipl,
    int iflag,
    ffi.Pointer<ffi.Double> dret,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_get_orbital_elements(
      tjd_et,
      ipl,
      iflag,
      dret,
      serr,
    );
  }

  late final _swe_get_orbital_elementsPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(ffi.Double, int32, int32, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_get_orbital_elements');
  late final _swe_get_orbital_elements =
      _swe_get_orbital_elementsPtr.asFunction<
          int Function(double, int, int, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>();

  int swe_orbit_max_min_true_distance(
    double tjd_et,
    int ipl,
    int iflag,
    ffi.Pointer<ffi.Double> dmax,
    ffi.Pointer<ffi.Double> dmin,
    ffi.Pointer<ffi.Double> dtrue,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_orbit_max_min_true_distance(
      tjd_et,
      ipl,
      iflag,
      dmax,
      dmin,
      dtrue,
      serr,
    );
  }

  late final _swe_orbit_max_min_true_distancePtr = _lookup<
      ffi.NativeFunction<
          int32 Function(
              ffi.Double,
              int32,
              int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_orbit_max_min_true_distance');
  late final _swe_orbit_max_min_true_distance =
      _swe_orbit_max_min_true_distancePtr.asFunction<
          int Function(
              double,
              int,
              int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>();

  /// delta t
  double swe_deltat(
    double tjd,
  ) {
    return _swe_deltat(
      tjd,
    );
  }

  late final _swe_deltatPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'swe_deltat');
  late final _swe_deltat = _swe_deltatPtr.asFunction<double Function(double)>();

  double swe_deltat_ex(
    double tjd,
    int iflag,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_deltat_ex(
      tjd,
      iflag,
      serr,
    );
  }

  late final _swe_deltat_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, int32, ffi.Pointer<ffi.Uint8>)>>('swe_deltat_ex');
  late final _swe_deltat_ex = _swe_deltat_exPtr
      .asFunction<double Function(double, int, ffi.Pointer<ffi.Uint8>)>();

  /// equation of time
  int swe_time_equ(
    double tjd,
    ffi.Pointer<ffi.Double> te,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_time_equ(
      tjd,
      te,
      serr,
    );
  }

  late final _swe_time_equPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(ffi.Double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_time_equ');
  late final _swe_time_equ = _swe_time_equPtr.asFunction<
      int Function(double, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint8>)>();

  int swe_lmt_to_lat(
    double tjd_lmt,
    double geolon,
    ffi.Pointer<ffi.Double> tjd_lat,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_lmt_to_lat(
      tjd_lmt,
      geolon,
      tjd_lat,
      serr,
    );
  }

  late final _swe_lmt_to_latPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(ffi.Double, ffi.Double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_lmt_to_lat');
  late final _swe_lmt_to_lat = _swe_lmt_to_latPtr.asFunction<
      int Function(
          double, double, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint8>)>();

  int swe_lat_to_lmt(
    double tjd_lat,
    double geolon,
    ffi.Pointer<ffi.Double> tjd_lmt,
    ffi.Pointer<ffi.Uint8> serr,
  ) {
    return _swe_lat_to_lmt(
      tjd_lat,
      geolon,
      tjd_lmt,
      serr,
    );
  }

  late final _swe_lat_to_lmtPtr = _lookup<
      ffi.NativeFunction<
          int32 Function(ffi.Double, ffi.Double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint8>)>>('swe_lat_to_lmt');
  late final _swe_lat_to_lmt = _swe_lat_to_lmtPtr.asFunction<
      int Function(
          double, double, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint8>)>();

  /// sidereal time
  double swe_sidtime0(
    double tjd_ut,
    double eps,
    double nut,
  ) {
    return _swe_sidtime0(
      tjd_ut,
      eps,
      nut,
    );
  }

  late final _swe_sidtime0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('swe_sidtime0');
  late final _swe_sidtime0 =
      _swe_sidtime0Ptr.asFunction<double Function(double, double, double)>();

  double swe_sidtime(
    double tjd_ut,
  ) {
    return _swe_sidtime(
      tjd_ut,
    );
  }

  late final _swe_sidtimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'swe_sidtime');
  late final _swe_sidtime =
      _swe_sidtimePtr.asFunction<double Function(double)>();

  void swe_set_interpolate_nut(
    int do_interpolate,
  ) {
    return _swe_set_interpolate_nut(
      do_interpolate,
    );
  }

  late final _swe_set_interpolate_nutPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AS_BOOL)>>(
          'swe_set_interpolate_nut');
  late final _swe_set_interpolate_nut =
      _swe_set_interpolate_nutPtr.asFunction<void Function(int)>();

  /// coordinate transformation polar -> polar
  void swe_cotrans(
    ffi.Pointer<ffi.Double> xpo,
    ffi.Pointer<ffi.Double> xpn,
    double eps,
  ) {
    return _swe_cotrans(
      xpo,
      xpn,
      eps,
    );
  }

  late final _swe_cotransPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Double)>>('swe_cotrans');
  late final _swe_cotrans = _swe_cotransPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, double)>();

  void swe_cotrans_sp(
    ffi.Pointer<ffi.Double> xpo,
    ffi.Pointer<ffi.Double> xpn,
    double eps,
  ) {
    return _swe_cotrans_sp(
      xpo,
      xpn,
      eps,
    );
  }

  late final _swe_cotrans_spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Double)>>('swe_cotrans_sp');
  late final _swe_cotrans_sp = _swe_cotrans_spPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, double)>();

  /// tidal acceleration to be used in swe_deltat()
  double swe_get_tid_acc() {
    return _swe_get_tid_acc();
  }

  late final _swe_get_tid_accPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('swe_get_tid_acc');
  late final _swe_get_tid_acc =
      _swe_get_tid_accPtr.asFunction<double Function()>();

  void swe_set_tid_acc(
    double t_acc,
  ) {
    return _swe_set_tid_acc(
      t_acc,
    );
  }

  late final _swe_set_tid_accPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Double)>>(
          'swe_set_tid_acc');
  late final _swe_set_tid_acc =
      _swe_set_tid_accPtr.asFunction<void Function(double)>();

  /// set a user defined delta t to be returned by functions
  /// swe_deltat() and swe_deltat_ex()
  void swe_set_delta_t_userdef(
    double dt,
  ) {
    return _swe_set_delta_t_userdef(
      dt,
    );
  }

  late final _swe_set_delta_t_userdefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Double)>>(
          'swe_set_delta_t_userdef');
  late final _swe_set_delta_t_userdef =
      _swe_set_delta_t_userdefPtr.asFunction<void Function(double)>();

  double swe_degnorm(
    double x,
  ) {
    return _swe_degnorm(
      x,
    );
  }

  late final _swe_degnormPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'swe_degnorm');
  late final _swe_degnorm =
      _swe_degnormPtr.asFunction<double Function(double)>();

  double swe_radnorm(
    double x,
  ) {
    return _swe_radnorm(
      x,
    );
  }

  late final _swe_radnormPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'swe_radnorm');
  late final _swe_radnorm =
      _swe_radnormPtr.asFunction<double Function(double)>();

  double swe_rad_midp(
    double x1,
    double x0,
  ) {
    return _swe_rad_midp(
      x1,
      x0,
    );
  }

  late final _swe_rad_midpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'swe_rad_midp');
  late final _swe_rad_midp =
      _swe_rad_midpPtr.asFunction<double Function(double, double)>();

  double swe_deg_midp(
    double x1,
    double x0,
  ) {
    return _swe_deg_midp(
      x1,
      x0,
    );
  }

  late final _swe_deg_midpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'swe_deg_midp');
  late final _swe_deg_midp =
      _swe_deg_midpPtr.asFunction<double Function(double, double)>();

  void swe_split_deg(
    double ddeg,
    int roundflag,
    ffi.Pointer<int32> ideg,
    ffi.Pointer<int32> imin,
    ffi.Pointer<int32> isec,
    ffi.Pointer<ffi.Double> dsecfr,
    ffi.Pointer<int32> isgn,
  ) {
    return _swe_split_deg(
      ddeg,
      roundflag,
      ideg,
      imin,
      isec,
      dsecfr,
      isgn,
    );
  }

  late final _swe_split_degPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double,
              int32,
              ffi.Pointer<int32>,
              ffi.Pointer<int32>,
              ffi.Pointer<int32>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<int32>)>>('swe_split_deg');
  late final _swe_split_deg = _swe_split_degPtr.asFunction<
      void Function(double, int, ffi.Pointer<int32>, ffi.Pointer<int32>,
          ffi.Pointer<int32>, ffi.Pointer<ffi.Double>, ffi.Pointer<int32>)>();

  /// normalize argument into interval [0..DEG360]
  int swe_csnorm(
    int p,
  ) {
    return _swe_csnorm(
      p,
    );
  }

  late final _swe_csnormPtr =
      _lookup<ffi.NativeFunction<centisec Function(centisec)>>('swe_csnorm');
  late final _swe_csnorm = _swe_csnormPtr.asFunction<int Function(int)>();

  /// distance in centisecs p1 - p2 normalized to [0..360[
  int swe_difcsn(
    int p1,
    int p2,
  ) {
    return _swe_difcsn(
      p1,
      p2,
    );
  }

  late final _swe_difcsnPtr =
      _lookup<ffi.NativeFunction<centisec Function(centisec, centisec)>>(
          'swe_difcsn');
  late final _swe_difcsn = _swe_difcsnPtr.asFunction<int Function(int, int)>();

  double swe_difdegn(
    double p1,
    double p2,
  ) {
    return _swe_difdegn(
      p1,
      p2,
    );
  }

  late final _swe_difdegnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'swe_difdegn');
  late final _swe_difdegn =
      _swe_difdegnPtr.asFunction<double Function(double, double)>();

  /// distance in centisecs p1 - p2 normalized to [-180..180[
  int swe_difcs2n(
    int p1,
    int p2,
  ) {
    return _swe_difcs2n(
      p1,
      p2,
    );
  }

  late final _swe_difcs2nPtr =
      _lookup<ffi.NativeFunction<centisec Function(centisec, centisec)>>(
          'swe_difcs2n');
  late final _swe_difcs2n =
      _swe_difcs2nPtr.asFunction<int Function(int, int)>();

  double swe_difdeg2n(
    double p1,
    double p2,
  ) {
    return _swe_difdeg2n(
      p1,
      p2,
    );
  }

  late final _swe_difdeg2nPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'swe_difdeg2n');
  late final _swe_difdeg2n =
      _swe_difdeg2nPtr.asFunction<double Function(double, double)>();

  double swe_difrad2n(
    double p1,
    double p2,
  ) {
    return _swe_difrad2n(
      p1,
      p2,
    );
  }

  late final _swe_difrad2nPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'swe_difrad2n');
  late final _swe_difrad2n =
      _swe_difrad2nPtr.asFunction<double Function(double, double)>();

  /// round second, but at 29.5959 always down
  int swe_csroundsec(
    int x,
  ) {
    return _swe_csroundsec(
      x,
    );
  }

  late final _swe_csroundsecPtr =
      _lookup<ffi.NativeFunction<centisec Function(centisec)>>(
          'swe_csroundsec');
  late final _swe_csroundsec =
      _swe_csroundsecPtr.asFunction<int Function(int)>();

  /// double to int32 with rounding, no overflow check
  int swe_d2l(
    double x,
  ) {
    return _swe_d2l(
      x,
    );
  }

  late final _swe_d2lPtr =
      _lookup<ffi.NativeFunction<int32 Function(ffi.Double)>>('swe_d2l');
  late final _swe_d2l = _swe_d2lPtr.asFunction<int Function(double)>();

  /// monday = 0, ... sunday = 6
  int swe_day_of_week(
    double jd,
  ) {
    return _swe_day_of_week(
      jd,
    );
  }

  late final _swe_day_of_weekPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          'swe_day_of_week');
  late final _swe_day_of_week =
      _swe_day_of_weekPtr.asFunction<int Function(double)>();

  ffi.Pointer<ffi.Uint8> swe_cs2timestr(
    int t,
    int sep,
    int suppressZero,
    ffi.Pointer<ffi.Uint8> a,
  ) {
    return _swe_cs2timestr(
      t,
      sep,
      suppressZero,
      a,
    );
  }

  late final _swe_cs2timestrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(centisec, ffi.Int, AS_BOOL,
              ffi.Pointer<ffi.Uint8>)>>('swe_cs2timestr');
  late final _swe_cs2timestr = _swe_cs2timestrPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(int, int, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<ffi.Uint8> swe_cs2lonlatstr(
    int t,
    int pchar,
    int mchar,
    ffi.Pointer<ffi.Uint8> s,
  ) {
    return _swe_cs2lonlatstr(
      t,
      pchar,
      mchar,
      s,
    );
  }

  late final _swe_cs2lonlatstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(centisec, ffi.Uint8, ffi.Uint8,
              ffi.Pointer<ffi.Uint8>)>>('swe_cs2lonlatstr');
  late final _swe_cs2lonlatstr = _swe_cs2lonlatstrPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(int, int, int, ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<ffi.Uint8> swe_cs2degstr(
    int t,
    ffi.Pointer<ffi.Uint8> a,
  ) {
    return _swe_cs2degstr(
      t,
      a,
    );
  }

  late final _swe_cs2degstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              centisec, ffi.Pointer<ffi.Uint8>)>>('swe_cs2degstr');
  late final _swe_cs2degstr = _swe_cs2degstrPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(int, ffi.Pointer<ffi.Uint8>)>();

  int write_file(
    ffi.Pointer<ffi.Uint8> path,
    ffi.Pointer<ffi.Uint8> contents,
    int len,
    int forceOverwrite,
  ) {
    return _write_file(
      path,
      contents,
      len,
      forceOverwrite,
    );
  }

  late final _write_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Size, ffi.Int)>>('write_file');
  late final _write_file = _write_filePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int, int)>();
}

typedef int32 = ffi.Int;

/// unsigned integer with at least 32 bit precision
typedef AS_BOOL = ffi.Int;
typedef centisec = int32;

const double SE_AUNIT_TO_KM = 149597870.7;

const double SE_AUNIT_TO_LIGHTYEAR = 0.000015812507409819728;

const double SE_AUNIT_TO_PARSEC = 0.000004848136811095274;

const int SE_JUL_CAL = 0;

const int SE_GREG_CAL = 1;

const int SE_ECL_NUT = -1;

const int SE_SUN = 0;

const int SE_MOON = 1;

const int SE_MERCURY = 2;

const int SE_VENUS = 3;

const int SE_MARS = 4;

const int SE_JUPITER = 5;

const int SE_SATURN = 6;

const int SE_URANUS = 7;

const int SE_NEPTUNE = 8;

const int SE_PLUTO = 9;

const int SE_MEAN_NODE = 10;

const int SE_TRUE_NODE = 11;

const int SE_MEAN_APOG = 12;

const int SE_OSCU_APOG = 13;

const int SE_EARTH = 14;

const int SE_CHIRON = 15;

const int SE_PHOLUS = 16;

const int SE_CERES = 17;

const int SE_PALLAS = 18;

const int SE_JUNO = 19;

const int SE_VESTA = 20;

const int SE_INTP_APOG = 21;

const int SE_INTP_PERG = 22;

const int SE_NPLANETS = 23;

const int SE_PLMOON_OFFSET = 9000;

const int SE_AST_OFFSET = 10000;

const int SE_VARUNA = 30000;

const int SE_FICT_OFFSET = 40;

const int SE_FICT_OFFSET_1 = 39;

const int SE_FICT_MAX = 999;

const int SE_NFICT_ELEM = 15;

const int SE_COMET_OFFSET = 1000;

const int SE_NALL_NAT_POINTS = 38;

const int SE_CUPIDO = 40;

const int SE_HADES = 41;

const int SE_ZEUS = 42;

const int SE_KRONOS = 43;

const int SE_APOLLON = 44;

const int SE_ADMETOS = 45;

const int SE_VULKANUS = 46;

const int SE_POSEIDON = 47;

const int SE_ISIS = 48;

const int SE_NIBIRU = 49;

const int SE_HARRINGTON = 50;

const int SE_NEPTUNE_LEVERRIER = 51;

const int SE_NEPTUNE_ADAMS = 52;

const int SE_PLUTO_LOWELL = 53;

const int SE_PLUTO_PICKERING = 54;

const int SE_VULCAN = 55;

const int SE_WHITE_MOON = 56;

const int SE_PROSERPINA = 57;

const int SE_WALDEMATH = 58;

const int SE_FIXSTAR = -10;

const int SE_ASC = 0;

const int SE_MC = 1;

const int SE_ARMC = 2;

const int SE_VERTEX = 3;

const int SE_EQUASC = 4;

const int SE_COASC1 = 5;

const int SE_COASC2 = 6;

const int SE_POLASC = 7;

const int SE_NASCMC = 8;

const int SEFLG_JPLEPH = 1;

const int SEFLG_SWIEPH = 2;

const int SEFLG_MOSEPH = 4;

const int SEFLG_HELCTR = 8;

const int SEFLG_TRUEPOS = 16;

const int SEFLG_J2000 = 32;

const int SEFLG_NONUT = 64;

const int SEFLG_SPEED3 = 128;

const int SEFLG_SPEED = 256;

const int SEFLG_NOGDEFL = 512;

const int SEFLG_NOABERR = 1024;

const int SEFLG_ASTROMETRIC = 1536;

const int SEFLG_EQUATORIAL = 2048;

const int SEFLG_XYZ = 4096;

const int SEFLG_RADIANS = 8192;

const int SEFLG_BARYCTR = 16384;

const int SEFLG_TOPOCTR = 32768;

const int SEFLG_ORBEL_AA = 32768;

const int SEFLG_TROPICAL = 0;

const int SEFLG_SIDEREAL = 65536;

const int SEFLG_ICRS = 131072;

const int SEFLG_DPSIDEPS_1980 = 262144;

const int SEFLG_JPLHOR = 262144;

const int SEFLG_JPLHOR_APPROX = 524288;

const int SEFLG_CENTER_BODY = 1048576;

const int SEFLG_TEST_PLMOON = 2228280;

const int SE_SIDBITS = 256;

const int SE_SIDBIT_ECL_T0 = 256;

const int SE_SIDBIT_SSY_PLANE = 512;

const int SE_SIDBIT_USER_UT = 1024;

const int SE_SIDBIT_ECL_DATE = 2048;

const int SE_SIDBIT_NO_PREC_OFFSET = 4096;

const int SE_SIDBIT_PREC_ORIG = 8192;

const int SE_SIDM_FAGAN_BRADLEY = 0;

const int SE_SIDM_LAHIRI = 1;

const int SE_SIDM_DELUCE = 2;

const int SE_SIDM_RAMAN = 3;

const int SE_SIDM_USHASHASHI = 4;

const int SE_SIDM_KRISHNAMURTI = 5;

const int SE_SIDM_DJWHAL_KHUL = 6;

const int SE_SIDM_YUKTESHWAR = 7;

const int SE_SIDM_JN_BHASIN = 8;

const int SE_SIDM_BABYL_KUGLER1 = 9;

const int SE_SIDM_BABYL_KUGLER2 = 10;

const int SE_SIDM_BABYL_KUGLER3 = 11;

const int SE_SIDM_BABYL_HUBER = 12;

const int SE_SIDM_BABYL_ETPSC = 13;

const int SE_SIDM_ALDEBARAN_15TAU = 14;

const int SE_SIDM_HIPPARCHOS = 15;

const int SE_SIDM_SASSANIAN = 16;

const int SE_SIDM_GALCENT_0SAG = 17;

const int SE_SIDM_J2000 = 18;

const int SE_SIDM_J1900 = 19;

const int SE_SIDM_B1950 = 20;

const int SE_SIDM_SURYASIDDHANTA = 21;

const int SE_SIDM_SURYASIDDHANTA_MSUN = 22;

const int SE_SIDM_ARYABHATA = 23;

const int SE_SIDM_ARYABHATA_MSUN = 24;

const int SE_SIDM_SS_REVATI = 25;

const int SE_SIDM_SS_CITRA = 26;

const int SE_SIDM_TRUE_CITRA = 27;

const int SE_SIDM_TRUE_REVATI = 28;

const int SE_SIDM_TRUE_PUSHYA = 29;

const int SE_SIDM_GALCENT_RGILBRAND = 30;

const int SE_SIDM_GALEQU_IAU1958 = 31;

const int SE_SIDM_GALEQU_TRUE = 32;

const int SE_SIDM_GALEQU_MULA = 33;

const int SE_SIDM_GALALIGN_MARDYKS = 34;

const int SE_SIDM_TRUE_MULA = 35;

const int SE_SIDM_GALCENT_MULA_WILHELM = 36;

const int SE_SIDM_ARYABHATA_522 = 37;

const int SE_SIDM_BABYL_BRITTON = 38;

const int SE_SIDM_TRUE_SHEORAN = 39;

const int SE_SIDM_GALCENT_COCHRANE = 40;

const int SE_SIDM_GALEQU_FIORENZA = 41;

const int SE_SIDM_VALENS_MOON = 42;

const int SE_SIDM_LAHIRI_1940 = 43;

const int SE_SIDM_LAHIRI_VP285 = 44;

const int SE_SIDM_KRISHNAMURTI_VP291 = 45;

const int SE_SIDM_LAHIRI_ICRC = 46;

const int SE_SIDM_USER = 255;

const int SE_NSIDM_PREDEF = 47;

const int SE_NODBIT_MEAN = 1;

const int SE_NODBIT_OSCU = 2;

const int SE_NODBIT_OSCU_BAR = 4;

const int SE_NODBIT_FOPOINT = 256;

const int SEFLG_DEFAULTEPH = 2;

const int SE_MAX_STNAME = 256;

const int SE_ECL_CENTRAL = 1;

const int SE_ECL_NONCENTRAL = 2;

const int SE_ECL_TOTAL = 4;

const int SE_ECL_ANNULAR = 8;

const int SE_ECL_PARTIAL = 16;

const int SE_ECL_ANNULAR_TOTAL = 32;

const int SE_ECL_HYBRID = 32;

const int SE_ECL_PENUMBRAL = 64;

const int SE_ECL_ALLTYPES_SOLAR = 63;

const int SE_ECL_ALLTYPES_LUNAR = 84;

const int SE_ECL_VISIBLE = 128;

const int SE_ECL_MAX_VISIBLE = 256;

const int SE_ECL_1ST_VISIBLE = 512;

const int SE_ECL_PARTBEG_VISIBLE = 512;

const int SE_ECL_2ND_VISIBLE = 1024;

const int SE_ECL_TOTBEG_VISIBLE = 1024;

const int SE_ECL_3RD_VISIBLE = 2048;

const int SE_ECL_TOTEND_VISIBLE = 2048;

const int SE_ECL_4TH_VISIBLE = 4096;

const int SE_ECL_PARTEND_VISIBLE = 4096;

const int SE_ECL_PENUMBBEG_VISIBLE = 8192;

const int SE_ECL_PENUMBEND_VISIBLE = 16384;

const int SE_ECL_OCC_BEG_DAYLIGHT = 8192;

const int SE_ECL_OCC_END_DAYLIGHT = 16384;

const int SE_ECL_ONE_TRY = 32768;

const int SE_CALC_RISE = 1;

const int SE_CALC_SET = 2;

const int SE_CALC_MTRANSIT = 4;

const int SE_CALC_ITRANSIT = 8;

const int SE_BIT_DISC_CENTER = 256;

const int SE_BIT_DISC_BOTTOM = 8192;

const int SE_BIT_GEOCTR_NO_ECL_LAT = 128;

const int SE_BIT_NO_REFRACTION = 512;

const int SE_BIT_CIVIL_TWILIGHT = 1024;

const int SE_BIT_NAUTIC_TWILIGHT = 2048;

const int SE_BIT_ASTRO_TWILIGHT = 4096;

const int SE_BIT_FIXED_DISC_SIZE = 16384;

const int SE_BIT_FORCE_SLOW_METHOD = 32768;

const int SE_BIT_HINDU_RISING = 896;

const int SE_ECL2HOR = 0;

const int SE_EQU2HOR = 1;

const int SE_HOR2ECL = 0;

const int SE_HOR2EQU = 1;

const int SE_TRUE_TO_APP = 0;

const int SE_APP_TO_TRUE = 1;

const int SE_DE_NUMBER = 431;

const String SE_FNAME_DE200 = 'de200.eph';

const String SE_FNAME_DE403 = 'de403.eph';

const String SE_FNAME_DE404 = 'de404.eph';

const String SE_FNAME_DE405 = 'de405.eph';

const String SE_FNAME_DE406 = 'de406.eph';

const String SE_FNAME_DE431 = 'de431.eph';

const String SE_FNAME_DFT = 'de431.eph';

const String SE_FNAME_DFT2 = 'de406.eph';

const String SE_STARFILE_OLD = 'fixstars.cat';

const String SE_STARFILE = 'sefstars.txt';

const String SE_ASTNAMFILE = 'seasnam.txt';

const String SE_FICTFILE = 'seorbel.txt';

const String SE_EPHE_PATH = '\\sweph\\ephe\\';

const int SE_SPLIT_DEG_ROUND_SEC = 1;

const int SE_SPLIT_DEG_ROUND_MIN = 2;

const int SE_SPLIT_DEG_ROUND_DEG = 4;

const int SE_SPLIT_DEG_ZODIACAL = 8;

const int SE_SPLIT_DEG_NAKSHATRA = 1024;

const int SE_SPLIT_DEG_KEEP_SIGN = 16;

const int SE_SPLIT_DEG_KEEP_DEG = 32;

const int SE_HELIACAL_RISING = 1;

const int SE_HELIACAL_SETTING = 2;

const int SE_MORNING_FIRST = 1;

const int SE_EVENING_LAST = 2;

const int SE_EVENING_FIRST = 3;

const int SE_MORNING_LAST = 4;

const int SE_ACRONYCHAL_RISING = 5;

const int SE_ACRONYCHAL_SETTING = 6;

const int SE_COSMICAL_SETTING = 6;

const int SE_HELFLAG_LONG_SEARCH = 128;

const int SE_HELFLAG_HIGH_PRECISION = 256;

const int SE_HELFLAG_OPTICAL_PARAMS = 512;

const int SE_HELFLAG_NO_DETAILS = 1024;

const int SE_HELFLAG_SEARCH_1_PERIOD = 2048;

const int SE_HELFLAG_VISLIM_DARK = 4096;

const int SE_HELFLAG_VISLIM_NOMOON = 8192;

const int SE_HELFLAG_VISLIM_PHOTOPIC = 16384;

const int SE_HELFLAG_VISLIM_SCOTOPIC = 32768;

const int SE_HELFLAG_AV = 65536;

const int SE_HELFLAG_AVKIND_VR = 65536;

const int SE_HELFLAG_AVKIND_PTO = 131072;

const int SE_HELFLAG_AVKIND_MIN7 = 262144;

const int SE_HELFLAG_AVKIND_MIN9 = 524288;

const int SE_HELFLAG_AVKIND = 983040;

const double TJD_INVALID = 99999999.0;

const int SIMULATE_VICTORVB = 1;

const int SE_PHOTOPIC_FLAG = 0;

const int SE_SCOTOPIC_FLAG = 1;

const int SE_MIXEDOPIC_FLAG = 2;

const double SE_TIDAL_DE200 = -23.8946;

const double SE_TIDAL_DE403 = -25.58;

const double SE_TIDAL_DE404 = -25.58;

const double SE_TIDAL_DE405 = -25.826;

const double SE_TIDAL_DE406 = -25.826;

const double SE_TIDAL_DE421 = -25.85;

const double SE_TIDAL_DE422 = -25.85;

const double SE_TIDAL_DE430 = -25.82;

const double SE_TIDAL_DE431 = -25.8;

const double SE_TIDAL_DE441 = -25.936;

const double SE_TIDAL_26 = -26.0;

const double SE_TIDAL_STEPHENSON_2016 = -25.85;

const double SE_TIDAL_DEFAULT = -25.8;

const int SE_TIDAL_AUTOMATIC = 999999;

const double SE_TIDAL_MOSEPH = -25.58;

const double SE_TIDAL_SWIEPH = -25.8;

const double SE_TIDAL_JPLEPH = -25.8;

const double SE_DELTAT_AUTOMATIC = -1e-10;

const int SE_MODEL_DELTAT = 0;

const int SE_MODEL_PREC_LONGTERM = 1;

const int SE_MODEL_PREC_SHORTTERM = 2;

const int SE_MODEL_NUT = 3;

const int SE_MODEL_BIAS = 4;

const int SE_MODEL_JPLHOR_MODE = 5;

const int SE_MODEL_JPLHORA_MODE = 6;

const int SE_MODEL_SIDT = 7;

const int NSE_MODELS = 8;

const int SEMOD_NPREC = 11;

const int SEMOD_PREC_IAU_1976 = 1;

const int SEMOD_PREC_LASKAR_1986 = 2;

const int SEMOD_PREC_WILL_EPS_LASK = 3;

const int SEMOD_PREC_WILLIAMS_1994 = 4;

const int SEMOD_PREC_SIMON_1994 = 5;

const int SEMOD_PREC_IAU_2000 = 6;

const int SEMOD_PREC_BRETAGNON_2003 = 7;

const int SEMOD_PREC_IAU_2006 = 8;

const int SEMOD_PREC_VONDRAK_2011 = 9;

const int SEMOD_PREC_OWEN_1990 = 10;

const int SEMOD_PREC_NEWCOMB = 11;

const int SEMOD_PREC_DEFAULT = 9;

const int SEMOD_PREC_DEFAULT_SHORT = 9;

const int SEMOD_NNUT = 5;

const int SEMOD_NUT_IAU_1980 = 1;

const int SEMOD_NUT_IAU_CORR_1987 = 2;

const int SEMOD_NUT_IAU_2000A = 3;

const int SEMOD_NUT_IAU_2000B = 4;

const int SEMOD_NUT_WOOLARD = 5;

const int SEMOD_NUT_DEFAULT = 4;

const int SEMOD_NSIDT = 4;

const int SEMOD_SIDT_IAU_1976 = 1;

const int SEMOD_SIDT_IAU_2006 = 2;

const int SEMOD_SIDT_IERS_CONV_2010 = 3;

const int SEMOD_SIDT_LONGTERM = 4;

const int SEMOD_SIDT_DEFAULT = 4;

const int SEMOD_NBIAS = 3;

const int SEMOD_BIAS_NONE = 1;

const int SEMOD_BIAS_IAU2000 = 2;

const int SEMOD_BIAS_IAU2006 = 3;

const int SEMOD_BIAS_DEFAULT = 3;

const int SEMOD_NJPLHOR = 2;

const int SEMOD_JPLHOR_LONG_AGREEMENT = 1;

const int SEMOD_JPLHOR_DEFAULT = 1;

const int SEMOD_NJPLHORA = 3;

const int SEMOD_JPLHORA_1 = 1;

const int SEMOD_JPLHORA_2 = 2;

const int SEMOD_JPLHORA_3 = 3;

const int SEMOD_JPLHORA_DEFAULT = 3;

const int SEMOD_NDELTAT = 5;

const int SEMOD_DELTAT_STEPHENSON_MORRISON_1984 = 1;

const int SEMOD_DELTAT_STEPHENSON_1997 = 2;

const int SEMOD_DELTAT_STEPHENSON_MORRISON_2004 = 3;

const int SEMOD_DELTAT_ESPENAK_MEEUS_2006 = 4;

const int SEMOD_DELTAT_STEPHENSON_ETC_2016 = 5;

const int SEMOD_DELTAT_DEFAULT = 5;
